--------------------------------------------------------Garbage Collection--------------------------------------------------------
-- Garbage collection only happen in the heap area.
-- Way to request JVM to run garbage collector
    - System.gc()
    - Runtime.getRuntime().gc()
-- The finalize() method of Object class is a method that the Garbage Collector always calls just before the deletion/destroying the object which is eligible for Garbage   Collection, so as to perform clean-up activity. Clean-up activity means closing the resources associated with that object like Database Connection, Network Connection or we can say resource de-allocation
-- JVM allows finalize() to be invoked only once per object.
-- Garbage collector is a background/daemon thread and it runs only when all the non-daemon/foreground threads stop.
-- JVM performs garbage collection in two steps:
     - Marking: Unreferenced objects in heap are identified and marked as ready for garbage collection.
     - Deletion: In this step, the objects which were marked earlier are deleted.


--------------------------------------------------------String--------------------------------------------------------
- String objected created using 'new' is stored in heap memory, however, String literals gets stored in String Constant Pool.
- String and StringBuffer are thread safe, StringBuilder is not.
- StringBuffer is implemented by using Synchronized keyword on all the methods.
- String is thread safe because String objects are immutable, so everytime a thread makes some modifications to a String value, a new String object is created, therefore there is no point of inconsistent value.


--------------------------------------------------------Comparator--------------------------------------------------------
-- Returning 1 from 'compare(T i, T j)' method means 'swap', '-1' means don't swap, '0' means ignore.
-- Here are the 'lambda' version of the 'compare' function (i,j)->(i>j)?-1:(i<j)?1:0, this can be used to sort the integer elements a list in descending order, here in the first condition, we are check if i<j and if it is true we are returning '1', which means 'swap', if i>j then '-1' is being returned, which means 'dont swap'.


--------------------------------------------------------Comparable--------------------------------------------------------
-- Comparable can't be implemented using Lambda.